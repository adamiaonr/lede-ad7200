--- a/drivers/net/wireless/ath/wil6210/debugfs.c	2020-11-15 21:56:09.143870466 +0000
+++ c/drivers/net/wireless/ath/wil6210/debugfs.c	2020-11-15 22:04:47.625864721 +0000
@@ -63,8 +63,10 @@
 
 struct wil6210_priv *my_glob_wil = NULL;
 
-// END SEEMOO ADDITIONS
+/* global variable to hold 'current' set of SWEEP_DUMP_SIZE individual sweep dumps : global variable fixes a wil6210 crash */
+sweep_dump_t sweep_dump_glob, sweep_dump_glob_show;
 
+/* END SEEMOO ADDITIONS */
 
 static void wil_print_vring(struct seq_file *s, struct wil6210_priv *wil,
 			    const char *name, struct vring *vring,
@@ -1838,25 +1840,31 @@
 /*---------sweep dump---------*/
 static int
 sweep_dump_show(struct seq_file *s, void *data) {
-	u32 i, p, swp_direction, swp_cdown, swp_sector;
-	sweep_dump_t sweep_dump;
-	sector_info_t feedback_info;
-	int snr_qdb, snr_db;
+	u32 i, p, k, swp_direction, swp_cdown, swp_sector;
+	// u32 dmgi;
+	// sweep_dump_t sweep_dump;
+	// sector_info_t feedback_info;
+	// int snr_qdb, snr_db;
+	u64 dmg_tmstmp;
+
+	printk(KERN_CRIT "sweep_dump_show() : IN\n");
 
 	if(my_glob_wil != NULL) {
+
 		if(test_bit(WMI_FW_CAPABILITY_MOD_FW, my_glob_wil->fw_capabilities)) {
 
-			// Copy the Sweep Dump
-                        wil_memcpy_fromio_32((void *) &sweep_dump, (void * __force)my_glob_wil->csr + HOSTADDR(PTR_MEM_SWEEP_DUMP), sizeof(sweep_dump_t));
-	
-			seq_printf(s, "Counter: %d swps, %d pkts\n", 
-				sweep_dump.ctr_swps,  sweep_dump.ctr_pkts);
-			
+			// printk(KERN_CRIT "sweep_dump_show() : FW CAPABILITY MOD FW TEST DONE \n");
+
+			// copy the sweep dump
+			wil_memcpy_fromio_32((void *) &sweep_dump_glob, (void * __force) my_glob_wil->csr + HOSTADDR(PTR_MEM_SWEEP_DUMP), sizeof(sweep_dump_t));
+			// printk(KERN_CRIT "sweep_dump_show() : SWEEP DUMP MEMCPY DONE\n");
+			seq_printf(s, "Counter: %d swps, %d pkts\n", sweep_dump_glob.ctr_swps,  sweep_dump_glob.ctr_pkts);
 			seq_printf(s, "Sector Sweep Dump: {\n");
 		
-			// Iterate over all members in sweep dump
+			// iterate over all SWEEP_DUMP_SIZE individual sweep dump records
 			for(i=0; i < SWEEP_DUMP_SIZE; i++) {
-				p = (sweep_dump.cur_pos + i) % SWEEP_DUMP_SIZE;
+
+				p = (sweep_dump_glob.cur_pos + i) % SWEEP_DUMP_SIZE;
 				
 				/* snr_qdb = sweep_dump.dump[p].snr;
 				if (snr_qdb > 0xFF){
@@ -1872,106 +1880,116 @@
 					sweep_dump.dump[p].macaddr[3], sweep_dump.dump[p].macaddr[4], sweep_dump.dump[p].macaddr[5] );
 
 				*/
-				swp_direction = sweep_dump.dump[p].swp[0] & 0x01;
-				swp_cdown = (sweep_dump.dump[p].swp[0] >> 1) + ((sweep_dump.dump[p].swp[1] & 0x03) << 7);
-				swp_sector = (sweep_dump.dump[p].swp[1] >> 2) + ((sweep_dump.dump[p].swp[2] & 0x03) << 6);
+				swp_direction = sweep_dump_glob.dump[p].swp[0] & 0x01;
+				swp_cdown = (sweep_dump_glob.dump[p].swp[0] >> 1) + ((sweep_dump_glob.dump[p].swp[1] & 0x03) << 7);
+				swp_sector = (sweep_dump_glob.dump[p].swp[1] >> 2) + ((sweep_dump_glob.dump[p].swp[2] & 0x03) << 6);
 				
-				seq_printf(s, " [%4d src: %02x:%02x:%02x:%02x:%02x:%02x sec: %3d cdown: %3d dir: %1d snr: %3d.%02d dB (0x%04x)]\n",
-					sweep_dump.dump[p].ctr,
-					sweep_dump.dump[p].src[0], sweep_dump.dump[p].src[1], sweep_dump.dump[p].src[2],
-					sweep_dump.dump[p].src[3], sweep_dump.dump[p].src[4], sweep_dump.dump[p].src[5],
-					swp_sector, swp_cdown, swp_direction, sweep_dump.dump[p].snr >> 4,
-					((sweep_dump.dump[p].snr & 0xf) * 100 + 8) >> 4, sweep_dump.dump[p].snr);
+				dmg_tmstmp = 0;
+				for (k = 0; k < 8; k++)
+					dmg_tmstmp = (256 * dmg_tmstmp) + sweep_dump_glob.dump[p].dmg_tmstmp[k];
+
+				// seq_printf(s, " [ctr: %4d src: %02x:%02x:%02x:%02x:%02x:%02x sec: %3d cdown: %3d dir: %1d snr: %3d.%02d dB (0x%04x) tmstmp: %lld]\n",
+				seq_printf(s, " [ctr: %4d src: %02x:%02x:%02x:%02x:%02x:%02x sec: %3d cdown: %3d dir: %1d snr: %3d.%02d dB (0x%04x) tmstmp: %02x%02x%02x%02x%02x%02x%02x%02x]\n",					
+					sweep_dump_glob.dump[p].ctr,
+					sweep_dump_glob.dump[p].src[0], sweep_dump_glob.dump[p].src[1], sweep_dump_glob.dump[p].src[2],
+					sweep_dump_glob.dump[p].src[3], sweep_dump_glob.dump[p].src[4], sweep_dump_glob.dump[p].src[5],
+					swp_sector, swp_cdown, swp_direction, sweep_dump_glob.dump[p].snr >> 4,
+					((sweep_dump_glob.dump[p].snr & 0xf) * 100 + 8) >> 4, sweep_dump_glob.dump[p].snr,
+					// dmg_tmstmp);
+					sweep_dump_glob.dump[p].dmg_tmstmp[0], sweep_dump_glob.dump[p].dmg_tmstmp[1], sweep_dump_glob.dump[p].dmg_tmstmp[2],
+					sweep_dump_glob.dump[p].dmg_tmstmp[3], sweep_dump_glob.dump[p].dmg_tmstmp[4], sweep_dump_glob.dump[p].dmg_tmstmp[5],
+					sweep_dump_glob.dump[p].dmg_tmstmp[6], sweep_dump_glob.dump[p].dmg_tmstmp[7]);
 			}
+
 			seq_printf(s, "}\n");
-        	} else {
-            		return -1;
-        	}
-    	} else {
-        	return -1;
-    	}
-    	return 0;
+
+		} else {
+			// printk(KERN_CRIT "sweep_dump_show() : FW CAPABILITY MOD FW TEST FAIL \n");
+			return -1;
+		}
+	} else {
+		// printk(KERN_CRIT "sweep_dump_show() : MY GLOB WIL FAIL \n");
+		return -1;
+	}
+	// printk(KERN_CRIT "sweep_dump_show() : OUT\n");
+	return 0;
 }
 
-static int
-sweep_dump_open(struct inode *inode, struct file *file) {
-    return single_open(file, sweep_dump_show, inode->i_private);
+static int sweep_dump_open(struct inode *inode, struct file *file) {
+	return single_open(file, sweep_dump_show, inode->i_private);
 }
 
 static const struct file_operations fops_sweep_dump = {
-    	.open       	= sweep_dump_open,
-	.release	= single_release,
-	.read		= seq_read,
-	.llseek		= seq_lseek,
+	.open 		= sweep_dump_open,
+	.release 	= single_release,
+	.read 		= seq_read,
+	.llseek 	= seq_lseek,
 };
 
 
-static int
-sweep_dump_cur_show(struct seq_file *s, void *data) {
-        u32 i, p, j;
-        sweep_dump_t sweep_dump;
-        sector_info_t feedback_info;
-        int snr_qdb, snr_db;
-
-        if(my_glob_wil != NULL) {
-                if(test_bit(WMI_FW_CAPABILITY_MOD_FW, my_glob_wil->fw_capabilities)) {
-                                        
+static int sweep_dump_cur_show(struct seq_file *s, void *data) {
+	// u32 i, p, j;
+	// sweep_dump_t sweep_dump;
+	// sector_info_t feedback_info;
+	// int snr_qdb, snr_db;
+
+	if(my_glob_wil != NULL) {
+		if(test_bit(WMI_FW_CAPABILITY_MOD_FW, my_glob_wil->fw_capabilities)) {
+
 			// Copy the Sweep Dump
-                        wil_memcpy_fromio_32((void *) &sweep_dump, (void * __force)my_glob_wil->csr + HOSTADDR(PTR_MEM_SWEEP_DUMP), sizeof(sweep_dump_t));
+			wil_memcpy_fromio_32((void *) &sweep_dump_glob_show, (void * __force)my_glob_wil->csr + HOSTADDR(PTR_MEM_SWEEP_DUMP), sizeof(sweep_dump_t));
 
-                        seq_printf(s, "Counter: %d swps, %d pkts\n",
-                                sweep_dump.ctr_swps,  sweep_dump.ctr_pkts);
+			seq_printf(s, "Counter: %d swps, %d pkts\n",
+			sweep_dump_glob_show.ctr_swps,  sweep_dump_glob_show.ctr_pkts);
 
-                        seq_printf(s, "Sector Sweep Dump: {\n");
+			seq_printf(s, "Sector Sweep Dump: {\n");
 
 			// Find the most actual sweep packets
 			/*j = sweep_dump.cur_pos - 1;	
 			for(i=1; i < SWEEP_DUMP_SIZE; i++) {
 				p = (sweep_dump.cur_pos - i - 1) % SWEEP_DUMP_SIZE;
 				if (sweep_dump.dump[p].sector_id > sweep_dump.dump[(p+1) % SWEEP_DUMP_SIZE].sector_id)
-					break;
+				break;
 			}
 
 			while (p != (sweep_dump.cur_pos - 1) % SWEEP_DUMP_SIZE) {
 				p = (p + 1) % SWEEP_DUMP_SIZE;
 
-                                snr_qdb = sweep_dump.dump[p].snr;
+				snr_qdb = sweep_dump.dump[p].snr;
 				if (snr_qdb > 0xFF){
-                                        snr_qdb -= 0x200;
-                                }
+					snr_qdb -= 0x200;
+				}
 
-                                // Determine the SNR in dB
-                                snr_db = (snr_qdb + 2) >> 2;
+				// Determine the SNR in dB
+				snr_db = (snr_qdb + 2) >> 2;
 
 				seq_printf(s, "  [sec: %2d rssi: %7d snr: %3d qdB (%2d dB) src: %02x:%02x:%02x:%02x:%02x:%02x]\n",
-                                        sweep_dump.dump[p].sector_id, sweep_dump.dump[p].rssi, snr_qdb, snr_db,
-                                        sweep_dump.dump[p].macaddr[0], sweep_dump.dump[p].macaddr[1], sweep_dump.dump[p].macaddr[2],
-                                        sweep_dump.dump[p].macaddr[3], sweep_dump.dump[p].macaddr[4], sweep_dump.dump[p].macaddr[5] );
+				sweep_dump.dump[p].sector_id, sweep_dump.dump[p].rssi, snr_qdb, snr_db,
+				sweep_dump.dump[p].macaddr[0], sweep_dump.dump[p].macaddr[1], sweep_dump.dump[p].macaddr[2],
+				sweep_dump.dump[p].macaddr[3], sweep_dump.dump[p].macaddr[4], sweep_dump.dump[p].macaddr[5] );
 
 			} */
-                        seq_printf(s, "}\n");
-                } else {
-                        return -1;
-                }
-        } else {
-                return -1;
-        }
-        return 0;
+			seq_printf(s, "}\n");
+		} else {
+			return -1;
+		}
+	} else {
+		return -1;
+	}
+	return 0;
 }
 
-static int
-sweep_dump_cur_open(struct inode *inode, struct file *file) {
-    return single_open(file, sweep_dump_cur_show, inode->i_private);
+static int sweep_dump_cur_open(struct inode *inode, struct file *file) {
+	return single_open(file, sweep_dump_cur_show, inode->i_private);
 }
 
 static const struct file_operations fops_sweep_dump_cur = {
-    .open       = sweep_dump_cur_open,
+	.open  		= sweep_dump_cur_open,
 	.release	= single_release,
 	.read		= seq_read,
 	.llseek		= seq_lseek,
 };
 
-
 /*----------------*/
 static void wil6210_debugfs_init_blobs(struct wil6210_priv *wil,
 				       struct dentry *dbg)
--- a/drivers/net/wireless/ath/wil6210/sweep_info.h	2020-11-15 21:55:57.800180301 +0000
+++ c/drivers/net/wireless/ath/wil6210/sweep_info.h	2020-11-15 21:59:01.271190982 +0000
@@ -21,19 +21,21 @@
 } sector_info_t; */
 
 typedef struct {
-        uint8_t src[6];
-        uint8_t swp[3];
-        int16_t snr;
-        uint16_t ctr;
-        uint16_t flags;
-} sector_info_t;
+    uint8_t src[6];
+    uint8_t swp[3];
+    int16_t snr;
+    uint16_t ctr;
+    uint16_t flags;
+    uint8_t dmg_tmstmp[8];
+} sector_info_t; // 6 + 3 + 2 + 2 + 2 + 8 = 23 byte
 
 typedef struct {
     uint32_t cur_pos;
     uint32_t ctr_pkts;
     uint32_t ctr_swps;
+    uint8_t dmg_tmstmp[8];
     sector_info_t dump[SWEEP_DUMP_SIZE];
-} sweep_dump_t;
+} sweep_dump_t; // 4 + 4 + 4 + 8 + 256 * 23 = 5908 byte
 
 #define PTR_MEM_SWEEP_CUR_FEEDBACK 0x93D000
 #define PTR_MEM_SWEEP_DUMP 0x93D018
